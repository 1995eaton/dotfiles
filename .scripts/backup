#!/bin/bash

# Copyright (C) 2014 Jake Eaton

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

ORIGIN="/home/jake/"
DESTINATION="/home/backups/."

# Exclude matching filenames (e.g. *duck* => any file/directory containing the word 'duck')
EXCLUDE=(
   '*google-chrome*'
   'downloads'
)

# Add any additional rsync arguments here
RSYNC_ARGS=(
   '-ar'
   '--delete'
   `for e in ${EXCLUDE[*]}; do echo -n "--exclude=$e "; done`
)

ARG1=$1; ARG2=$2; ARG3=$3

backup() {
   DATE=$(date "+%Y-%m-%d_%H.%M.%S")
   CURRENT_YEAR=$(date +%Y)
   CURRENT_MONTH=$(date +%m)

   if [ ! -d "$DESTINATION" ] ; then
      mkdir -p "$DESTINATION"
   fi

   if [ ! -h "$DESTINATION"Current ] ; then
      rsync ${RSYNC_ARGS[*]} "$ORIGIN" "$DESTINATION"
   fi
   rsync ${RSYNC_ARGS[*]} --link-dest="$DESTINATION"Current "$ORIGIN" "$DESTINATION$DATE"

   rm -f "$DESTINATION"Current
   ln -s "$DESTINATION$DATE" "$DESTINATION"Current

   exit
}

options() {
   echo -e "usage: backup.sh [--list] [--help] [--size] [--backup] [--remove int-int int,int int]"
   echo
   echo "-l, --list    lists available backups"
   echo "-h, --help    displays this message"
   echo "-s, --size    displays the size (human readable format) of the backup directory + other statistics"
   echo "-b, --backup  creates a new backup destination from the current \$ORIGIN"
   echo "-r, --remove  deletes a backup from the backup index (--list)"
}

size() {
   space_used=`du -ch "$DESTINATION" | tail -n 1 | sed -e 's/\ttotal//g'`
   file_count=`find "$DESTINATION" -links 2 | wc -l`
   total_backups=$(echo `ls "$DESTINATION" | wc -l`-1 | bc)
   most_recent="$(for i in `ls "$DESTINATION"`; do stat -c %z "$DESTINATION$i" | sed 's/\..*$//'; done | sort | tail -n 1)"
   oldest=$(for i in `ls "$DESTINATION"`; do stat -c %z "$DESTINATION$i" | sed 's/\..*$//'; done | sort -r | tail -n 1)

   echo "Total space used: ----------------------------------------- "$space_used""
   echo "Total amount of files (excluding hard-linked): ------------ "$file_count""
   echo "Total number of backups: ---------------------------------- "$total_backups""
   echo "Oldest backup: -------------------------------------------- "$oldest""
   echo "Most recent backup: --------------------------------------- "$most_recent""
   exit
}

makelist() { c=0
   for i in `ls -w 1 "$DESTINATION" | grep -v 'Current'`; do
      BACKUP_LIST[$c]="$i"
      c=`echo "$c+1" | bc`
   done
}

list() {
   c=0
   for i in ${BACKUP_LIST[*]}; do
      echo "$c": `echo $i | tr '-' '/' | tr '.' ':' | tr '_' ' '`
      c=`echo "$c+1" | bc`
   done
   exit
}

remove_backup() {
   for i in `echo "$ARG2" | sed 's/,/ /g' | sed 's/\([0-9]\+\)-\([0-9]\+\)/\1,\2/g'` ; do
      if [ `echo "$i" | grep ','` ]; then
         b=`echo "$i" | tr ',' ' '`
      else b="$i $i"; fi
      for i2 in $(seq $b); do
         if [[ ${BACKUP_LIST[$i2]} && `echo "$i2" | egrep '^[0-9]+$'` ]]; then
            to_be_removed="$DESTINATION${BACKUP_LIST[$i2]}"
            if [[ "$b" != 1 && -e "$to_be_removed" ]]; then
               rm -rf "$to_be_removed"
            fi
         else echo "Error: could not find backup ($i2)"
            break
         fi
      done
   done
   exit
}

export_backup() {
   if [ ! "${BACKUP_LIST[$ARG2]}" ]; then
      echo "Error: invalid backup \"$ARG2\""
      exit
   elif [ ! "$ARG3" ]; then
      echo "Error: no export directory specified"
      exit
   elif [ ! -e "$ARG3" ]; then
      echo "Error: invalid export directory"
      exit
   fi
   tar czfvh "$ARG3/${BACKUP_LIST[$ARG2]}".tar.gz "$DESTINATION${BACKUP_LIST[$ARG2]}"
   exit
}

edit() {
   EDITORS=('vim' 'vi' 'emacs' 'nano' 'pico' 'gedit' 'leafpad')
   e=`which $EDITOR`
   if [[ $EDITOR && $e ]]; then
      $EDITOR "$0"
      exit
   fi
   for editor in ${EDITORS[*]}; do
      e=`which $editor`
      if [ $e ]; then
         $editor "$0"
         exit
      fi
   done
}

# Main
case "$ARG1" in
   '-b'|'--backup')
      backup
      ;;
   '-s'|'--size')
      size
      ;;
   '-l'|'--list')
      makelist
      list
      ;;
   '-r'|'--remove')
      makelist
      remove_backup
      ;;
   '-e'|'--export')
      makelist
      export_backup
      ;;
   '--edit')
      edit
esac

# Leftover cases
options
