execute pathogen#infect()

" Color schemes

set t_Co=256
colorscheme molokai
set background=dark

" Lightline

set laststatus=2
let g:lightline = { 'colorscheme': 'wombat' }

" File settings

filetype plugin indent on
set fileformats=unix,dos,mac

" Syntax hightlighting

syntax on
map <silent> <S-h> :nohl<cr>

" Line numbering (dynamic + relative)

set number

" Cursor movement

set mouse=nicr
nnoremap j gj
nnoremap k gk
nnoremap 0 g^
nnoremap $ g$
map J jzz
map K kzz
map L zz

" Disable line breaks unless the <Enter> key is hit

set wrap
set linebreak
set nolist
set textwidth=0
set wrapmargin=0

" Normal backspace behavior (non-Vi)

set backspace=2

" Tab settings

set smarttab
set tabstop=2
set shiftwidth=2
set expandtab

" Searching

set incsearch
set hlsearch
set ignorecase
set smartcase
set magic

" Copy/Paste to/from X buffer

vnoremap gy "+y
nmap gp "+p
vmap gp "+p

" Reload vimrc

nmap <silent> <leader>r :so ~/.vimrc<cr>

" Vim comments

nmap ge gcc
vmap ge gc

" Bracket highlighting

set showmatch
set matchtime=2

" Disable file backups + swapfile creation

set noswapfile
set nobackup
set nowb

" Command mode settings

set wildmenu
set wildmode=list:longest
set shellslash
set history=100

" Vim notes

let g:notes_directories=['~/notes']

" Emmet

let g:user_emmet_leader_key='<C-e>'

" GUI options

if has('gui_running')
  set guifont=Bitstream\ Vera\ Sans\ Mono\ 10
  autocmd GUIEnter * set vb t_vb=
  autocmd VimEnter * set vb t_vb=
  set guioptions-=T
  set guioptions-=e
  set guioptions-=r
  set guioptions-=m
endif

" Windows

function! MapAll(key, mapping)
  execute 'imap' a:key "<C-o>" . a:mapping
  execute 'map' a:key a:mapping
endfunction

call MapAll("<C-j>", "<C-w>j")
call MapAll("<C-k>", "<C-w>k")
call MapAll("<C-h>", "<C-w>h")
call MapAll("<C-l>", "<C-w>l")

map <silent> [ :vertical res -3<CR>
map <silent> ] :vertical res +3<CR>
map <silent> { :res -3<CR>
map <silent> } :res +3<CR>

" Miscellaneous

vnoremap . :normal .<CR>
set visualbell t_vb=
set ttimeoutlen=0
set timeoutlen=500
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
nnoremap <C-n> :NERDTreeToggle<CR>
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
let g:Tex_CompileRule_ps='ps2pdf $*'
nnoremap <buffer> <C-b> :w<cr>:exec '!clear'<cr>:exec '!python' shellescape(@%, 1)<cr>
set ttyfast
set lazyredraw
