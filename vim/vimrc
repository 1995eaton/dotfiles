execute pathogen#infect()

" Color schemes
set t_Co=256
" let g:rehash256=1
" colorscheme molokai

" File settings
filetype plugin indent on
" au BufReadPost * call vimcomplete#init()
set fileformats=unix,dos,mac

" Syntax hightlighting
syntax on
nnoremap <silent> <C-h> :nohlsearch<CR>
colorscheme mine


" Line numbering
" set relativenumber
set number

" Cursor movement
set mouse=nicr
nnoremap j gj
nnoremap k gk
nnoremap 0 g^
nnoremap $ g$
map J jzz
map K kzz
map L zz

" Disable line breaks unless the <Enter> key is hit
set wrap
set linebreak
set nolist
set textwidth=0
set wrapmargin=0

" Normal backspace behavior (non-Vi)
set backspace=2

" Tab settings
set smarttab
set tabstop=2
set shiftwidth=2
set expandtab

" Searching
set incsearch
set hlsearch
set ignorecase
set smartcase
set magic

" Reload vimrc
nmap <silent> <leader>r :so ~/.vimrc<cr>

" Vim comments
nmap ge gac
vmap ge ga

" Copy/Paste to/from X buffer
vnoremap gy "+y
vnoremap gd "+d
vnoremap gc "+c
nnoremap gC "+C
nnoremap gcc "+cc
nnoremap gD "+D
nnoremap gd "+d
nnoremap gy "+y
nnoremap <C-y> :%y+"<cr>
nnoremap gp "+p
vnoremap gp "+p

" Bracket highlighting
set showmatch
set matchtime=2

" Disable file backups + swapfile creation
set noswapfile
set nobackup
set nowb

" Command mode settings
set wildmenu
set wildmode=longest:list,full
set shellslash
set history=100

" Vim notes
let g:notes_directories=['~/notes']

" Emmet
let g:user_emmet_leader_key='<C-f>'

set pumheight=20
set completeopt=menuone

" Syntastic
nnoremap <C-s> :SyntasticToggleMode<CR>
let g:syntastic_javascript_checkers = ['jshint']
hi SpellCap term=reverse ctermbg=160
let g:neocomplete#auto_completion_start_length=2
let g:neocomplete#force_overwrite_completefunc=1
let g:neocomplete#max_keyword_width=80
let g:neocomplete#sources#tags#cache_limit_size=5000000

" Airline
set laststatus=2
let g:airline_theme='molokai'
let g:airline_left_sep=''
let g:airline_right_sep=''
" let g:airline_left_sep=''
" let g:airline_right_sep=''
let g:tcommentMapLeaderOp1="ga"
map <C-t> :tabnew<CR>:Explore<CR>
map <A-q> :q<CR>
map <C-S-q> :q!<CR>

" Miscellaneous
vnoremap . :normal .<CR>
set visualbell t_vb=
set ttimeoutlen=0
set ttyfast
set timeoutlen=500
set lazyredraw
vnoremap <C-e> <C-u>
nnoremap <C-e> <C-u>
let g:run_fifo = "/tmp/vim-run_fifo"
let g:run_exec_on_write = 1

" Mappings
nnoremap Q @q
nnoremap @@ @q
vmap gq ygvge
nmap gqq yyge
set nofoldenable
nnoremap ' `
nnoremap ` '
nnoremap '' ``zz
nnoremap `` ``zz
vnoremap < <gv
vnoremap > >gv
let loaded_matchparen = 1
nnoremap <C-p> :SyntasticToggleMode<CR>
nnoremap go mto<Esc>`t
nnoremap gO mtO<Esc>`t
inoremap <C-j> <Space><Esc>T)C {<CR>}<Esc>O
nnoremap <C-j> :source $MYVIMRC<CR>
vnoremap ab :normal Va{o^<CR>
vmap ib :normal Va{o0<CR>
omap <silent> ab :normal Vab<CR>
omap <silent> ib i{<CR>
au BufRead,BufNewFile *.md set filetype=markdown
map <C-j> :source ~/.vimrc<CR>
let g:jschromeapis = 1
let g:javascript#bracehi = 1
" let g:javascript#equalhi = 1

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = ' -std=c++14'
" set cursorline
set expandtab

" GUI options
if has('gui_running')
  set guifont=DejaVu\ Sans\ Mono\ 10
  autocmd GUIEnter * set vb t_vb=
  autocmd VimEnter * set vb t_vb=
  colorscheme molokai
  set laststatus=0
  set guioptions-=T
  set guioptions-=e
  set guioptions-=r
  set guioptions-=m
  set guioptions+=m
endif

nnoremap <C-f> :NERDTree<CR>

let g:ycm_confirm_extra_conf = 0
let g:ycm_always_populate_location_list = 1
let g:ycm_show_diagnostics_ui = 0

func! HighlightInstances()
  let @/ = expand("<cword>")
  set hlsearch
endfunc
nnoremap <silent> <C-k> :set nohlsearch\|:call HighlightInstances()<CR>
au BufRead,BufNewFile *.peg set filetype=javascript

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
