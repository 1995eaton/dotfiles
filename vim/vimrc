execute pathogen#infect()
Helptags

" Color schemes
set t_Co=256

" File settings
filetype plugin indent on
set fileformats=unix,dos,mac

" Syntax hightlighting
syntax enable
nnoremap <silent> <C-h> :nohlsearch<CR>
set background=dark
colorscheme mine

" Line numbering
set number
" set relativenumber
" set cursorline

" Cursor movement
set mouse=n
nnoremap j gj
nnoremap k gk
nnoremap 0 g^
nnoremap $ g$
nnoremap g$ $
nnoremap g0 0
nnoremap J jzz
nnoremap K kzz
vnoremap K k
vnoremap J j

" Disable line breaks unless the <Enter> key is hit
set wrap
set linebreak
set showbreak=\ ...\ "
set nolist
set textwidth=0
set wrapmargin=0

" Normal backspace behavior (non-Vi)
set backspace=2

" Tab settings
set smarttab
set tabstop=2
set shiftwidth=2
set expandtab

" Searching
set incsearch
set hlsearch
set ignorecase
set smartcase
set magic

" Reload vimrc
nmap <silent> <leader>r :so ~/.vimrc<cr>

" Copy/Paste to/from X buffer
vnoremap gy "+y
vnoremap gd "+d
vnoremap gc "+c
nnoremap gC "+C
nnoremap gcc "+cc
nnoremap gD "+D
nnoremap gd "+d
nnoremap gy "+y
nnoremap <C-y> :%y+"<cr>
nnoremap gp "+p
vnoremap gp "+p

" Bracket highlighting
set showmatch
set matchtime=2

" Disable file backups + swapfile creation
set noswapfile
set nobackup
set nowb

" Command mode settings
set wildmenu
set wildmode=longest:list,full
set shellslash
set history=100

" Airline
set laststatus=2
let g:airline_theme='molokai'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:tcommentMapLeaderOp1="s"
map <A-q> :q<CR>
map <C-S-q> :q!<CR>

" Miscellaneous
vnoremap . :normal .<CR>
set expandtab
set visualbell t_vb=
set ttimeoutlen=0
set ttyfast
set noesckeys
set noshowmode
set timeoutlen=3000
set lazyredraw
set pastetoggle=<C-t>
vnoremap <C-e> <C-u>
nnoremap <C-e> <C-u>
" Commenting
nmap ss sc

" Mappings
nnoremap Q @q
vnoremap Q :norm @q<CR>
nnoremap @@ @q
nnoremap <C-f> :call neocomplete#initialize()<CR>:NeoCompleteToggle<CR>
inoremap <C-e> <C-o>A
inoremap <C-a> <C-o>I
inoremap <C-b> <C-o><BS>
inoremap <C-f> <C-o><Space>
vmap gq ygvge
nmap gqq yyge
set nofoldenable
nnoremap ' `
nnoremap ` '
nnoremap '' ``zz
nnoremap `` ``zz
vnoremap < <gv
vnoremap > >gv
let loaded_matchparen = 1
nnoremap go mto<Esc>`t
nnoremap gO mtO<Esc>`t
cnoremap <C-a> <C-b>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
nnoremap <silent> <C-j> :call ToggleLineMax()<CR>
inoremap <silent> <C-j> <C-o>:call ToggleLineMax()<CR>


map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

hi CursorLine ctermbg=233
hi CursorLineNr ctermbg=233

" GUI options
if has('gui_running')
  set guifont=DejaVu\ Sans\ Mono\ 10
  autocmd GUIEnter * set vb t_vb=
  autocmd VimEnter * set vb t_vb=
  colorscheme molokai
  set laststatus=0
  set guioptions-=T
  set guioptions-=e
  set guioptions-=r
  set guioptions-=m
  set guioptions+=m
endif

hi LineMax cterm=none
match LineMax /\%81v.*/
let s:line_max_enabled = 0
func! ToggleLineMax()
  let s:line_max_enabled = !s:line_max_enabled
  if s:line_max_enabled
    echo "LineMax Enabled"
    hi link LineMax Todo
  else
    echo "LineMax Disabled"
    hi link LineMax NONE
  endif
endfunc


" Syntastic {{
nnoremap <C-s> :SyntasticToggleMode<CR>
let g:syntastic_javascript_checkers = ['eslint']
hi SpellCap term=reverse ctermbg=160
nnoremap <C-p> :SyntasticToggleMode<CR>
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = ' -std=c++14'
func! PkgConfig(libs)
  return system('pkg-config --cflags --libs '.a:libs.' | tr -d "\n"')
endfunc
let g:syntastic_cpp_compiler_options = ' -std=c++14 '.PkgConfig('gtk+-3.0 vte-2.91')
let g:syntastic_c_compiler_options = ' -std=gnu11 '.PkgConfig('gtk+-3.0')
let g:syntastic_nasm_compiler_options = ' -felf64 '
let g:syntastic_java_javac_config_file_enabled = 1
let g:syntastic_java_javac_config_file = '/home/jake/.syntastic_javac_config'
let g:syntastic_check_on_wq = 0
hi SyntasticErrorSign ctermbg=233
hi SyntasticWarningSign ctermbg=233
let g:syntastic_error_symbol = "E"
let g:syntastic_warning_symbol = "W"
hi SpellCap term=reverse ctermbg=160
" }}

" Neocomplete {{
set pumheight=8
set completeopt=menu
let g:neocomplete#auto_completion_start_length=2
let g:neocomplete#force_overwrite_completefunc=1
let g:neocomplete#max_keyword_width=80
let g:neocomplete#sources#tags#cache_limit_size=5000000
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 0
let g:neocomplete#sources#syntax#min_keyword_length = 2
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.javascript = '[a-zA-Z_$]\{3,}\|\.[a-zA-Z_$]*'
" }}

func! NoEOL()
  au BufWritePre,BufWritePost * :set binary | set noeol
endfunc

au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.peg,*.jison set ft=javascript
au BufRead,BufNewFile *\<compton.conf set filetype=compton
au BufRead,BufNewFile *.s set ft=nasm | set cindent
au BufNewFile,BufRead sxhkdrc set ft=sxhkdrc

au FileType cs setlocal cinoptions+=j1,J1 ts=4 sw=4
au FileType java set ts=4 sw=4
au FileType cpp set ts=4 sw=4
au FileType c set ts=4 sw=4
au FileType javascript set ts=2 sw=2
au FileType python setlocal completeopt-=preview
au FileType css setlocal omnifunc=csscomplete#CompleteCSS
au FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
au FileType python setlocal omnifunc=pythoncomplete#Complete
au FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
au Filetype tex setlocal nofoldenable

call tcomment#DefineType('sxhkdrc', '# %s')
call tcomment#DefineType('tmux', '# %s')
call tcomment#DefineType('asm', '# %s')
call tcomment#DefineType('compton', '# %s')
